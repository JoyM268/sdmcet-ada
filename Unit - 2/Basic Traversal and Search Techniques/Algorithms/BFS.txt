Implements a breadth-first search traversal of a given graph

BFS(G)
Input: Graph G = <V,E>
Output: Graph G with its vertices marked with consecutive integers in the order they are visited 
by the BFS traversal mark each vertex in V with 0 as a mark of being "unvisited"
 
count <- 0
for each vertex v in V do
    if v is marked with 0
        bfs(v)


bfs(v)
visits all the unvisited vertices connected to vertex v by 
a path and numbers them in the order they are visited 
via global variable count

count <- count + 1; mark v with count and initialize a queue with v
while the queue is not empty do
    for each vertex w in V adjacent to the front vertex do
        if w is marked with 0
            count <- count + 1; mark w with count
            add w to the queue
    remove the front vertex from the queue

Time complexity: 
θ(|V|^2) {for adjacency matrix representation}
θ(|V| + |E|) {for adjacency list representation}